# -*- coding: utf-8 -*-
"""Plagiarism Checker in Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hov8OB59v2lL2z_nSHm1GgbmRLR6EOBL
"""

import string
from collections import Counter

def levenshtein_distance(s1, s2):
    if len(s1) > len(s2):
        s1, s2 = s2, s1

    distances = range(len(s1) + 1)
    for i2, c2 in enumerate(s2):
        distances_ = [i2 + 1]
        for i1, c1 in enumerate(s1):
            if c1 == c2:
                distances_.append(distances[i1])
            else:
                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))
        distances = distances_
    return distances[-1]

def preprocess_text(text):
    text = text.lower()  # Convert text to lowercase
    text = text.translate(str.maketrans('', '', string.punctuation))  # Remove punctuation
    tokens = text.split()  # Tokenize text into words
    return tokens

def calculate_similarity_score(text1, text2):
    tokens1 = preprocess_text(text1)
    tokens2 = preprocess_text(text2)

    # Calculate word frequencies
    frequency1 = Counter(tokens1)
    frequency2 = Counter(tokens2)

    # Calculate total word count
    total_count1 = sum(frequency1.values())
    total_count2 = sum(frequency2.values())

    # Calculate similarity score
    similarity_score = 0.0
    for token, count1 in frequency1.items():
        count2 = frequency2.get(token, 0)
        similarity_score += min(count1, count2)

    similarity_score /= max(total_count1, total_count2)
    return similarity_score

def check_plagiarism(text1, text2, threshold=0.8):
    similarity_score = calculate_similarity_score(text1, text2)
    if similarity_score >= threshold:
        print("Plagiarism detected!")
    else:
        print("No plagiarism detected.")

text1 = "This is a sample text."
text2 = "This is another text."
check_plagiarism(text1, text2)

